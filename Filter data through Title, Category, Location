
"use client"
import { useEffect, useState } from "react"
import axios from "axios"
const Read = () => {
    let i=1;
    const [post, setPost] = useState([]);
    const [filteredPosts, setFilteredPosts] = useState([]);
     const [categories, setCategories] = useState([]);
     const [selectedCategory, setSelectedCategory] = useState('');
     const [experienceLevels, setExperienceLevels] = useState([]);
     const [selectedExperience, setSelectedExperience] = useState('');
     const [countries, setCountries] = useState([]);
     const [selectedCountry, setSelectedCountry] = useState('');

     const [currentPage, setCurrentPage] = useState(1);
     const [postsPerPage] = useState(5);
     const [maxPageButtons] = useState(5); // Number of page buttons to show
    const fetchingData = async ()=> {
        try{
            const response = await axios.get('http://localhost:8000/api/jobs');
            setPost(response.data);
            setFilteredPosts(response.data);
            setCategories([...new Set(response.data.map((e)=>e.job_cat))]);
            setExperienceLevels([...new Set(response.data.map(post => post.job_exp_level))]);
            setCountries([...new Set(response.data.map((e)=>e.job_location))]);
        }catch(error){
            console.log(error);
        }
    }
    const applyFilter = ()=> {
        let filtered = post;
         if(selectedCategory){
             filtered = filtered.filter((e)=>e.job_cat === selectedCategory);
         }
         if(selectedExperience){
            filtered = filtered.filter((e)=>e.job_exp_level === selectedExperience);
         }
         if(selectedCountry){
            filtered = filtered.filter((e)=>e.job_location === selectedCountry);
         }
         

         setFilteredPosts(filtered);
    }
    useEffect(()=>{
        fetchingData();
    },[])

    useEffect(()=>{
        applyFilter();
    },[selectedCategory,selectedExperience,selectedCountry])

    // Pagination logic
    const indexOfLastPost = currentPage * postsPerPage;
    const indexOfFirstPost = indexOfLastPost - postsPerPage;
    const currentPosts = filteredPosts.slice(indexOfFirstPost, indexOfLastPost);

    const totalPages = Math.ceil(filteredPosts.length / postsPerPage);

    // Calculate page numbers to display
    const startPage = Math.max(1, currentPage - Math.floor(maxPageButtons / 2));
    const endPage = Math.min(totalPages, startPage + maxPageButtons - 1);

    const handlePagination = (pageNumber) => {
        setCurrentPage(pageNumber);
    };
    return (
        <div>
            <h2>Read data</h2>

            <ul className="w-full grid grid-cols-3">
                <div>
                    <select onChange={(e)=>setSelectedCategory(e.target.value)}>
                    <option value="">Select a category</option>
                      {categories.map((job_cat)=>
                      <option value={job_cat} key={job_cat}>{job_cat}</option>
                    )}
                    </select>
                </div>
                <div>
                <label>Experience Level:</label>
                <select onChange={(e) => setSelectedExperience(e.target.value)} value={selectedExperience}>
                    <option value="">Select experience level</option>
                    { experienceLevels.map((exp) => (
                        <option value={exp} key={exp}>{exp}</option>
                    ))}
                </select>
                 </div>

                 <div>
                    <label>Country</label>
                    <select onChange={(e)=>setSelectedCountry(e.target.value)} value={selectedCountry}>
                        <option value="">Select Country level</option>
                        {countries.map((country)=>(
                            <option key={country} value={country}>{country}</option>
                        ))}
                    </select>
                 </div>
                {currentPosts.map((e)=>{
                   
                    return(
                        <li key={e.id} className="border rounded p-2 bg-slate-50 m-3">
                            <p>{i++}</p>
                            <p>{e.job_title}</p>
                            <p>{e.job_link}</p>
                            <p>{e.job_location}</p>
                            <p>{e.job_cat}</p>
                            <p>{e.job_type}</p>
                            <p>{e.job_date}</p>
                            <p>{e.job_date_exp}</p>
                            <p>{e.job_salary}</p>
                            <p><span className="font-semibold">Experience Level:</span> {e.job_exp_level}</p>
                            <p>{e.career_level}</p>
                        </li>
                    )
                })}
               
            </ul>
             {/* Pagination Controls */}
             <div className="pagination">
                <button 
                    onClick={() => handlePagination(currentPage - 1)}
                    disabled={currentPage === 1}
                    className="pagination-button"
                >
                    Previous
                </button>
                
                {Array.from({ length: endPage - startPage + 1 }, (_, i) => i + startPage).map(number => (
                    <button 
                        key={number}
                        onClick={() => handlePagination(number)}
                        className={`pagination-button ${currentPage === number ? 'active' : ''}`}
                    >
                        {number}
                    </button>
                ))}

                <button 
                    onClick={() => handlePagination(currentPage + 1)}
                    disabled={currentPage === totalPages}
                    className="pagination-button"
                >
                    Next
                </button>
            </div>

        </div>
    )
}
export default Read;
